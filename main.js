// Generated by CoffeeScript 1.4.0
(function() {
  var BALLOON_OFFSET, CAT_NAME, CAT_WORD, GroupedMarker, INIT_LATITUDE, INIT_LONGTITUDE, Item, Map, SEARCH_ZOOM_LEVEL, TARGET_CAFE, TARGET_DINNER, TARGET_ENTERTAINMENT, TARGET_LUNCH, TARGET_PARTY, TARGET_TARGET, USER_ID, api_url, load_address, load_mmc_location, read_user_follow_items, resizeContentHeight, search_item;

  $(document).ready(function() {
    resizeContentHeight();
    $(window).bind("resize", resizeContentHeight);
    $('#item-pickup-target').bind('change', function() {
      var categories, category, elm, _i, _len;
      switch ($('#item-pickup-target').val()) {
        case "lunch":
          categories = TARGET_LUNCH;
          break;
        case "dinner":
          categories = TARGET_DINNER;
          break;
        case "cafe":
          categories = TARGET_CAFE;
          break;
        case "party":
          categories = TARGET_PARTY;
          break;
        case "entertainment":
          categories = TARGET_ENTERTAINMENT;
          break;
        default:
          categories = TARGET_TARGET;
      }
      $("#item-pickup-category").children().remove();
      for (_i = 0, _len = categories.length; _i < _len; _i++) {
        category = categories[_i];
        elm = $("<option>").html(CAT_NAME[category]).attr({
          value: CAT_WORD[category]
        });
        $("#item-pickup-category").append(elm);
      }
      search_item(".*", $('#item-pickup-category').val(), $('#item-pickup-input').val(), $('#item-pickup-distance').val());
      return false;
    });
    $('#item-pickup-category').bind('change', function() {
      search_item(".*", $('#item-pickup-category').val(), $('#item-pickup-input').val(), $('#item-pickup-distance').val());
      return false;
    });
    $('#item-pickup-distance').bind('change', function() {
      search_item(".*", $('#item-pickup-category').val(), $('#item-pickup-input').val(), $('#item-pickup-distance').val());
      return false;
    });
    $('#item-pickup-form').bind('submit', function() {
      search_item(".*", $('#item-pickup-category').val(), $('#item-pickup-input').val(), $('#item-pickup-distance').val());
      return false;
    });
    $('#mmc-location-button').bind('click', function() {
      return load_mmc_location();
    });
    $('#location-search').bind('submit', function() {
      load_address($('#address-input').val());
      return false;
    });
    return load_mmc_location();
  });

  load_mmc_location = function() {
    return Map.get().load();
  };

  resizeContentHeight = function() {
    var contentsHeight;
    contentsHeight = window.innerHeight - $('.navbar').height() - 30;
    if (contentsHeight < 0) {
      contentsHeight = 0;
    }
    $('#map_canvas').height(contentsHeight);
    return $('#search-result').height(contentsHeight);
  };

  load_address = function(address) {
    var geocoder;
    geocoder = new google.maps.Geocoder();
    return geocoder.geocode({
      address: address
    }, function(results, status) {
      var latlng, m;
      if (status === google.maps.GeocoderStatus.OK) {
        latlng = results[0].geometry.location;
        m = Map.get(latlng);
        m.gmap.setZoom(SEARCH_ZOOM_LEVEL);
        return m.load();
      } else {
        return alert("Geocode failed: " + status);
      }
    });
  };

  api_url = function(endpoint) {
    var api_url_base;
    api_url_base = "http://tab.do/api/1/";
    return "" + api_url_base + endpoint + ".json";
  };

  read_user_follow_items = function(cb) {
    var url;
    url = api_url("users/" + USER_ID + "/items");
    return $.get(url, {}, cb);
  };

  search_item = function(target, category, word, distance) {
    Map.get().update(target, category, word, distance);
    return true;
  };

  Map = (function() {
    var _instance;

    _instance = void 0;

    Map.get = function(latlng) {
      if (latlng == null) {
        latlng = new google.maps.LatLng(INIT_LATITUDE, INIT_LONGTITUDE);
      }
      if (_instance != null) {
        _instance.setCenter(latlng);
      } else {
        _instance = new Map(latlng);
      }
      return _instance;
    };

    function Map(latlng, zoom) {
      var control, myOptions, template,
        _this = this;
      if (zoom == null) {
        zoom = SEARCH_ZOOM_LEVEL;
      }
      this.markers = [];
      this.openGroupedInfoWindowFn = {};
      this.zorder = 0;
      this.loaded_data = null;
      this.grouped_marker_array = [];
      myOptions = {
        zoom: zoom,
        center: latlng,
        mapTypeId: google.maps.MapTypeId.ROADMAP,
        scrollwheel: false
      };
      this.gmap = new google.maps.Map(document.getElementById('map_canvas'), myOptions);
      template = Handlebars.compile($('#refresh-control-template').html());
      control = $(template({}))[0];
      google.maps.event.addDomListener(control, 'click', function() {
        return _this.load();
      });
      this.gmap.controls[google.maps.ControlPosition.TOP_RIGHT].push(control);
    }

    Map.prototype.setCenter = function(latlng) {
      return this.gmap.setCenter(latlng);
    };

    Map.prototype.createGroupedMarkers = function(new_item) {
      var grouped_marker, latlng, pushed, _i, _len, _ref;
      latlng = new_item.latlng();
      if (latlng != null) {
        _ref = this.grouped_marker_array;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          grouped_marker = _ref[_i];
          if ((grouped_marker.item_array[0] != null) && grouped_marker.item_array[0].item.places[0].id === new_item.item.places[0].id) {
            grouped_marker.item_array.push(new_item);
            pushed = true;
          }
        }
        if (!pushed) {
          grouped_marker = new GroupedMarker;
          grouped_marker.item_array.push(new_item);
          return this.grouped_marker_array.push(grouped_marker);
        }
      }
    };

    Map.prototype.showGroupedMarkers = function() {
      var grouped_marker, item, latlng, marker, num_i, num_m, offset, _i, _j, _len, _len1, _ref, _ref1, _results;
      _ref = this.grouped_marker_array;
      _results = [];
      for (num_m = _i = 0, _len = _ref.length; _i < _len; num_m = ++_i) {
        grouped_marker = _ref[num_m];
        latlng = grouped_marker.item_array[0].latlng();
        marker = new google.maps.Marker({
          position: latlng,
          map: this.gmap
        });
        _ref1 = grouped_marker.item_array;
        for (num_i = _j = 0, _len1 = _ref1.length; _j < _len1; num_i = ++_j) {
          item = _ref1[num_i];
          offset = new google.maps.Size(0, BALLOON_OFFSET * num_i);
          item.createInfoHtml(offset);
        }
        _results.push(this.bindBalloonToMarker(num_m, marker));
      }
      return _results;
    };

    Map.prototype.bindBalloonToMarker = function(index, marker) {
      var _this = this;
      this.openGroupedInfoWindowFn[index] = function() {
        var item, _i, _j, _len, _len1, _ref, _ref1, _results, _results1;
        if (_this.grouped_marker_array[index].openedInfoWindows) {
          _ref = _this.grouped_marker_array[index].item_array;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            item = _ref[_i];
            item.infoWindow.open(_this.gmap, marker);
            item.infoWindow.setZIndex(_this.zorder--);
            _results.push(_this.grouped_marker_array[index].openedInfoWindows = false);
          }
          return _results;
        } else {
          _ref1 = _this.grouped_marker_array[index].item_array;
          _results1 = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            item = _ref1[_j];
            item.infoWindow.close();
            _results1.push(_this.grouped_marker_array[index].openedInfoWindows = true);
          }
          return _results1;
        }
      };
      google.maps.event.addListener(marker, 'click', this.openGroupedInfoWindowFn[index]);
      return this.markers.push(marker);
    };

    Map.prototype.getGroupedMarkerIndex = function(item_id) {
      var grouped_item, grouped_marker, num_m, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.grouped_marker_array;
      for (num_m = _i = 0, _len = _ref.length; _i < _len; num_m = ++_i) {
        grouped_marker = _ref[num_m];
        _ref1 = grouped_marker.item_array;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          grouped_item = _ref1[_j];
          if (grouped_item.item.id === item_id) {
            return num_m;
          }
        }
      }
      return 0;
    };

    Map.prototype.clearMarkers = function() {
      var item, marker, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.loaded_data.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (item.infoWindow != null) {
          item.infoWindow.close();
          item.infoWindow = null;
        }
      }
      _ref1 = this.markers;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        marker = _ref1[_j];
        marker.setMap(null);
      }
      this.markers = [];
      return this.openGroupedInfoWindowFn = {};
    };

    Map.prototype.load = function(latlng) {
      var read_nearby_popular_with_current_map_range, result_div,
        _this = this;
      if (latlng == null) {
        latlng = this.gmap.getCenter();
      }
      console.log("load");
      result_div = $('#search-result');
      result_div.empty();
      result_div.html("<div class='loading-text'>Loading...</div>");
      read_nearby_popular_with_current_map_range = function() {
        var bounds, dist;
        bounds = _this.gmap.getBounds();
        if (bounds != null) {
          dist = google.maps.geometry.spherical.computeDistanceBetween(bounds.getNorthEast(), bounds.getSouthWest());
          return read_user_follow_items(function(data) {
            _this.loaded_data = data;
            return _this.update();
          });
        } else {
          return setTimeout(read_nearby_popular_with_current_map_range, 1000);
        }
      };
      return read_nearby_popular_with_current_map_range();
    };

    Map.prototype.update = function(target, category, word, distance) {
      var bDescription, bDistance, bTitle, item, item_instance, result_div, _i, _len, _ref,
        _this = this;
      if (target == null) {
        target = ".*";
      }
      if (category == null) {
        category = ".*";
      }
      if (word == null) {
        word = ".*";
      }
      if (distance == null) {
        distance = Infinity;
      }
      result_div = $('#search-result');
      result_div.empty();
      this.clearMarkers();
      this.grouped_marker_array = [];
      this.zorder = 0;
      if (!(this.loaded_data != null)) {
        return;
      }
      _ref = this.loaded_data.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        item_instance = new Item(item);
        bTitle = item.title.match(new RegExp(target)) && item.title.match(new RegExp(category)) && item.title.match(new RegExp(word));
        bDescription = item.description.match(new RegExp(target)) && item.description.match(new RegExp(category)) && item.description.match(new RegExp(word));
        bDistance = item_instance.distance < distance ? true : false;
        if (!((bTitle || bDescription) && bDistance)) {
          continue;
        }
        result_div.append(item_instance.html());
        this.createGroupedMarkers(item_instance);
        this.showGroupedMarkers();
      }
      return $('.entry').bind('click', function(event) {
        var item_id;
        item_id = $(event.currentTarget).data('item-id');
        return _this.openGroupedInfoWindowFn[_this.getGroupedMarkerIndex(item_id)]();
      });
    };

    return Map;

  })();

  GroupedMarker = (function() {

    function GroupedMarker() {
      this.item_array = [];
      this.openedInfoWindows = true;
    }

    return GroupedMarker;

  })();

  Item = (function() {
    var truncate;

    function Item(item) {
      var from, to, to_lat, to_lon;
      this.item = item;
      to_lat = 0;
      to_lon = 0;
      if (this.item.places[0].lat != null) {
        to_lat = this.item.places[0].lat;
      }
      if (this.item.places[0].lon != null) {
        to_lon = this.item.places[0].lon;
      }
      to = new google.maps.LatLng(to_lat, to_lon);
      from = new google.maps.LatLng(INIT_LATITUDE, INIT_LONGTITUDE);
      this.distance = google.maps.geometry.spherical.computeDistanceBetween(from, to);
    }

    Item.prototype.renderContext = function() {
      var item_img_m, item_img_s, mod_title, now, passedDate, updated_at;
      updated_at = new Date(this.item.updated_at);
      now = new Date();
      passedDate = (now - updated_at) / (1000 * 60 * 60 * 24);
      mod_title = this.item.title;
      if (this.item.places[0] != null) {
        mod_title += " @ " + this.item.places[0].name;
      }
      item_img_s = "";
      item_img_m = "";
      if (this.item.image_urls[0] != null) {
        item_img_s = this.item.image_urls[0].crop_S;
      }
      if (this.item.image_urls[0] != null) {
        item_img_m = this.item.image_urls[0].crop_M;
      }
      return {
        id: this.item.id,
        short_title: truncate(this.item.title, 20),
        title: mod_title,
        short_description: truncate(this.item.description, 50),
        long_description: truncate(this.item.description, 300),
        image_url_small: item_img_s,
        image_url: item_img_m,
        profile_image_url: this.item.user.profile_image_url.crop_S,
        tab_url: "https://tab.do/items/" + this.item.id,
        stream_url: "https://tab.do/streams/" + this.item.stream.id,
        stream_title: this.item.stream.title,
        is_new: passedDate < 1,
        distance: Math.round(this.distance)
      };
    };

    Item.prototype.html = function() {
      var template;
      template = Handlebars.compile($('#entry-template').html());
      return template(this.renderContext());
    };

    Item.prototype.infoHtml = function() {
      var template;
      template = Handlebars.compile($('#info-window-template').html());
      return template(this.renderContext());
    };

    Item.prototype.createInfoHtml = function(offset) {
      return this.infoWindow = new google.maps.InfoWindow({
        content: this.infoHtml(),
        pixelOffset: offset
      });
    };

    Item.prototype.latlng = function() {
      var place;
      if (this.item.places.length > 0) {
        place = this.item.places[0];
        return new google.maps.LatLng(place.lat, place.lon);
      }
    };

    truncate = function(string, maxchars) {
      if (!(string != null)) {
        "";

      }
      if (string.length <= maxchars || maxchars <= 3) {
        return string;
      } else {
        return string.slice(0, maxchars - 3) + '...';
      }
    };

    return Item;

  })();

  SEARCH_ZOOM_LEVEL = 16;

  USER_ID = 47009;

  INIT_LATITUDE = 35.457611;

  INIT_LONGTITUDE = 139.633296;

  BALLOON_OFFSET = -110;

  CAT_NAME = {
    category: "カテゴリ",
    japanese: "日本料理",
    sushi: "寿司",
    fish: "魚介・海鮮料理",
    soba: "そば(蕎麦)",
    udon: "うどん",
    eel: "うなぎ",
    grilled_chiken: "焼き鳥",
    fried_pork: "とんかつ",
    spit_roasting: "串揚げ",
    tempura: "天ぷら",
    okonomi: "お好み焼き",
    monja: "もんじゃ焼き",
    syabusyabu: "しゃぶしゃぶ",
    okinawa: "沖縄料理",
    western: "洋食",
    french: "フレンチ",
    italian: "イタリアン",
    spanish: "スペイン料理",
    pasta: "パスタ",
    pizza: "ピザ",
    steak: "ステーキ",
    hamburg_steak: "ハンバーグ",
    hamburger: "ハンバーガー",
    chinese: "中華料理",
    dumpling: "餃子",
    korean: "韓国料理",
    thai: "タイ料理",
    ramen: "ラーメン",
    carry: "カレー",
    grilled_meat: "焼肉",
    organ: "ホルモン",
    nabe: "鍋",
    motsu_nabe: "もつ鍋"
  };

  CAT_WORD = {
    category: ".*",
    japanese: "日本|和食",
    sushi: "寿司|すし|スシ",
    fish: "魚介|海鮮",
    soba: "ソバ|そば|蕎麦",
    udon: "うどん|饂飩",
    eel: "うなぎ|ウナギ|鰻",
    grilled_chiken: "焼き鳥|やきとり|焼きとり",
    fried_pork: "とんかつ|トンカツ|豚カツ",
    spit_roasting: "串揚げ",
    tempura: "天ぷら|てんぷら|天麩羅|テンプラ",
    okonomi: "お好み焼き",
    monja: "もんじゃ",
    syabusyabu: "しゃぶしゃぶ",
    okinawa: "沖縄",
    western: "洋食|西洋",
    french: "フレンチ|フランス料理",
    italian: "イタリアン|イタリア料理",
    spanish: "スパニッシュ|スペイン料理",
    pasta: "パスタ",
    pizza: "ピザ|ピッツア",
    steak: "ステーキ",
    hamburg_steak: "ハンバーグ",
    hamburger: "ハンバーガー",
    chinese: "中華",
    dumpling: "ギョウザ|ぎょうざ|餃子",
    korean: "韓国",
    thai: "タイ",
    ramen: "拉麺|ラーメン",
    carry: "カレー",
    grilled_meat: "焼肉",
    organ: "ホルモン",
    nabe: "鍋",
    motsu_nabe: "もつ鍋"
  };

  TARGET_TARGET = ["category"];

  TARGET_LUNCH = ["category", "japanese", "sushi", "fish"];

  TARGET_DINNER = ["category", "soba", "udon", "eel"];

  TARGET_CAFE = ["category", "grilled_chiken", "fried_pork", "spit_roasting"];

  TARGET_PARTY = ["category", "tempura", "okonomi", "monja"];

  TARGET_ENTERTAINMENT = ["category", "syabusyabu", "okinawa", "western"];

}).call(this);
